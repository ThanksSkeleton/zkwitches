/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ZkWitches {
  export type SharedStateStruct = {
    stateEnum: BigNumberish;
    playerSlotWaiting: BigNumberish;
    currentNumberOfPlayers: BigNumberish;
    playerAccusing: BigNumberish;
    accusationWitchType: BigNumberish;
    previous_action_game_block: BigNumberish;
    current_block: BigNumberish;
    current_sequence_number: BigNumberish;
    gameId: BigNumberish;
  };

  export type SharedStateStructOutput = [
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    stateEnum: number;
    playerSlotWaiting: number;
    currentNumberOfPlayers: number;
    playerAccusing: number;
    accusationWitchType: number;
    previous_action_game_block: BigNumber;
    current_block: BigNumber;
    current_sequence_number: BigNumber;
    gameId: BigNumber;
  };

  export type PlayerStateStruct = {
    isAlive: boolean;
    handCommitment: BigNumberish;
    food: BigNumberish;
    lumber: BigNumberish;
    WitchAlive: [boolean, boolean, boolean, boolean];
  };

  export type PlayerStateStructOutput = [
    boolean,
    BigNumber,
    number,
    number,
    [boolean, boolean, boolean, boolean]
  ] & {
    isAlive: boolean;
    handCommitment: BigNumber;
    food: number;
    lumber: number;
    WitchAlive: [boolean, boolean, boolean, boolean];
  };

  export type TotalGameStateStruct = {
    shared: ZkWitches.SharedStateStruct;
    addresses: [string, string, string, string];
    players: [
      ZkWitches.PlayerStateStruct,
      ZkWitches.PlayerStateStruct,
      ZkWitches.PlayerStateStruct,
      ZkWitches.PlayerStateStruct
    ];
  };

  export type TotalGameStateStructOutput = [
    ZkWitches.SharedStateStructOutput,
    [string, string, string, string],
    [
      ZkWitches.PlayerStateStructOutput,
      ZkWitches.PlayerStateStructOutput,
      ZkWitches.PlayerStateStructOutput,
      ZkWitches.PlayerStateStructOutput
    ]
  ] & {
    shared: ZkWitches.SharedStateStructOutput;
    addresses: [string, string, string, string];
    players: [
      ZkWitches.PlayerStateStructOutput,
      ZkWitches.PlayerStateStructOutput,
      ZkWitches.PlayerStateStructOutput,
      ZkWitches.PlayerStateStructOutput
    ];
  };
}

export interface ZkWitchesInterface extends utils.Interface {
  functions: {
    "ActionNoProof(uint8,uint8,uint8)": FunctionFragment;
    "ActionWithProof(uint8,uint8,uint256[2],uint256[2][2],uint256[2],uint256[7])": FunctionFragment;
    "DEBUG_SetGameState(((uint8,uint8,uint8,uint8,uint8,uint256,uint256,uint256,int256),address[4],tuple[4]))": FunctionFragment;
    "GetTGS()": FunctionFragment;
    "JoinGame(uint256[2],uint256[2][2],uint256[2],uint256[1])": FunctionFragment;
    "KickCurrentPlayer()": FunctionFragment;
    "RespondAccusation_NoWitch(uint256[2],uint256[2][2],uint256[2],uint256[2])": FunctionFragment;
    "RespondAccusation_YesWitch()": FunctionFragment;
    "Surrender()": FunctionFragment;
    "hc_verifierAddr()": FunctionFragment;
    "nw_verifierAddr()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tgs()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vm_verifierAddr()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ActionNoProof"
      | "ActionWithProof"
      | "DEBUG_SetGameState"
      | "GetTGS"
      | "JoinGame"
      | "KickCurrentPlayer"
      | "RespondAccusation_NoWitch"
      | "RespondAccusation_YesWitch"
      | "Surrender"
      | "hc_verifierAddr"
      | "nw_verifierAddr"
      | "owner"
      | "renounceOwnership"
      | "tgs"
      | "transferOwnership"
      | "vm_verifierAddr"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ActionNoProof",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ActionWithProof",
    values: [
      BigNumberish,
      BigNumberish,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "DEBUG_SetGameState",
    values: [ZkWitches.TotalGameStateStruct]
  ): string;
  encodeFunctionData(functionFragment: "GetTGS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "JoinGame",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "KickCurrentPlayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RespondAccusation_NoWitch",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "RespondAccusation_YesWitch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Surrender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hc_verifierAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nw_verifierAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tgs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vm_verifierAddr",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ActionNoProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ActionWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEBUG_SetGameState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GetTGS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "JoinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "KickCurrentPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RespondAccusation_NoWitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RespondAccusation_YesWitch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Surrender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hc_verifierAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nw_verifierAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tgs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vm_verifierAddr",
    data: BytesLike
  ): Result;

  events: {
    "AccusationResponse(int256,address,uint8,bool,uint256)": EventFragment;
    "Action(int256,address,uint8,uint8,uint8,uint8,uint8,uint256)": EventFragment;
    "GameStart(int256,uint256)": EventFragment;
    "Join(int256,address,uint8,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "VictoryLoss(int256,address,uint8,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccusationResponse"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Action"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Join"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VictoryLoss"): EventFragment;
}

export interface AccusationResponseEventObject {
  gameId: BigNumber;
  player: string;
  slot: number;
  innocent: boolean;
  timeStamp: BigNumber;
}
export type AccusationResponseEvent = TypedEvent<
  [BigNumber, string, number, boolean, BigNumber],
  AccusationResponseEventObject
>;

export type AccusationResponseEventFilter =
  TypedEventFilter<AccusationResponseEvent>;

export interface ActionEventObject {
  gameId: BigNumber;
  player: string;
  slot: number;
  actionType: number;
  target: number;
  witchType: number;
  actionLevel: number;
  timeStamp: BigNumber;
}
export type ActionEvent = TypedEvent<
  [BigNumber, string, number, number, number, number, number, BigNumber],
  ActionEventObject
>;

export type ActionEventFilter = TypedEventFilter<ActionEvent>;

export interface GameStartEventObject {
  gameId: BigNumber;
  timeStamp: BigNumber;
}
export type GameStartEvent = TypedEvent<
  [BigNumber, BigNumber],
  GameStartEventObject
>;

export type GameStartEventFilter = TypedEventFilter<GameStartEvent>;

export interface JoinEventObject {
  gameId: BigNumber;
  player: string;
  slot: number;
  timeStamp: BigNumber;
}
export type JoinEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  JoinEventObject
>;

export type JoinEventFilter = TypedEventFilter<JoinEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VictoryLossEventObject {
  gameId: BigNumber;
  player: string;
  slot: number;
  victoryLossType: number;
  timeStamp: BigNumber;
}
export type VictoryLossEvent = TypedEvent<
  [BigNumber, string, number, number, BigNumber],
  VictoryLossEventObject
>;

export type VictoryLossEventFilter = TypedEventFilter<VictoryLossEvent>;

export interface ZkWitches extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkWitchesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ActionNoProof(
      actionType: BigNumberish,
      actionTarget: BigNumberish,
      witchType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ActionWithProof(
      actionTarget: BigNumberish,
      witchType: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    DEBUG_SetGameState(
      inputTgs: ZkWitches.TotalGameStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    GetTGS(
      overrides?: CallOverrides
    ): Promise<[ZkWitches.TotalGameStateStructOutput]>;

    JoinGame(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    KickCurrentPlayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    RespondAccusation_NoWitch(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    RespondAccusation_YesWitch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Surrender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hc_verifierAddr(overrides?: CallOverrides): Promise<[string]>;

    nw_verifierAddr(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tgs(
      overrides?: CallOverrides
    ): Promise<
      [ZkWitches.SharedStateStructOutput] & {
        shared: ZkWitches.SharedStateStructOutput;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vm_verifierAddr(overrides?: CallOverrides): Promise<[string]>;
  };

  ActionNoProof(
    actionType: BigNumberish,
    actionTarget: BigNumberish,
    witchType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ActionWithProof(
    actionTarget: BigNumberish,
    witchType: BigNumberish,
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    input: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  DEBUG_SetGameState(
    inputTgs: ZkWitches.TotalGameStateStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  GetTGS(
    overrides?: CallOverrides
  ): Promise<ZkWitches.TotalGameStateStructOutput>;

  JoinGame(
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    input: [BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  KickCurrentPlayer(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  RespondAccusation_NoWitch(
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    input: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  RespondAccusation_YesWitch(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Surrender(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hc_verifierAddr(overrides?: CallOverrides): Promise<string>;

  nw_verifierAddr(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tgs(overrides?: CallOverrides): Promise<ZkWitches.SharedStateStructOutput>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vm_verifierAddr(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ActionNoProof(
      actionType: BigNumberish,
      actionTarget: BigNumberish,
      witchType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ActionWithProof(
      actionTarget: BigNumberish,
      witchType: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    DEBUG_SetGameState(
      inputTgs: ZkWitches.TotalGameStateStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    GetTGS(
      overrides?: CallOverrides
    ): Promise<ZkWitches.TotalGameStateStructOutput>;

    JoinGame(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    KickCurrentPlayer(overrides?: CallOverrides): Promise<void>;

    RespondAccusation_NoWitch(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    RespondAccusation_YesWitch(overrides?: CallOverrides): Promise<void>;

    Surrender(overrides?: CallOverrides): Promise<void>;

    hc_verifierAddr(overrides?: CallOverrides): Promise<string>;

    nw_verifierAddr(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tgs(overrides?: CallOverrides): Promise<ZkWitches.SharedStateStructOutput>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vm_verifierAddr(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AccusationResponse(int256,address,uint8,bool,uint256)"(
      gameId?: BigNumberish | null,
      player?: string | null,
      slot?: null,
      innocent?: null,
      timeStamp?: null
    ): AccusationResponseEventFilter;
    AccusationResponse(
      gameId?: BigNumberish | null,
      player?: string | null,
      slot?: null,
      innocent?: null,
      timeStamp?: null
    ): AccusationResponseEventFilter;

    "Action(int256,address,uint8,uint8,uint8,uint8,uint8,uint256)"(
      gameId?: BigNumberish | null,
      player?: string | null,
      slot?: null,
      actionType?: null,
      target?: null,
      witchType?: null,
      actionLevel?: null,
      timeStamp?: null
    ): ActionEventFilter;
    Action(
      gameId?: BigNumberish | null,
      player?: string | null,
      slot?: null,
      actionType?: null,
      target?: null,
      witchType?: null,
      actionLevel?: null,
      timeStamp?: null
    ): ActionEventFilter;

    "GameStart(int256,uint256)"(
      gameId?: BigNumberish | null,
      timeStamp?: null
    ): GameStartEventFilter;
    GameStart(
      gameId?: BigNumberish | null,
      timeStamp?: null
    ): GameStartEventFilter;

    "Join(int256,address,uint8,uint256)"(
      gameId?: BigNumberish | null,
      player?: string | null,
      slot?: null,
      timeStamp?: null
    ): JoinEventFilter;
    Join(
      gameId?: BigNumberish | null,
      player?: string | null,
      slot?: null,
      timeStamp?: null
    ): JoinEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "VictoryLoss(int256,address,uint8,uint8,uint256)"(
      gameId?: BigNumberish | null,
      player?: string | null,
      slot?: null,
      victoryLossType?: null,
      timeStamp?: null
    ): VictoryLossEventFilter;
    VictoryLoss(
      gameId?: BigNumberish | null,
      player?: string | null,
      slot?: null,
      victoryLossType?: null,
      timeStamp?: null
    ): VictoryLossEventFilter;
  };

  estimateGas: {
    ActionNoProof(
      actionType: BigNumberish,
      actionTarget: BigNumberish,
      witchType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ActionWithProof(
      actionTarget: BigNumberish,
      witchType: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    DEBUG_SetGameState(
      inputTgs: ZkWitches.TotalGameStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    GetTGS(overrides?: CallOverrides): Promise<BigNumber>;

    JoinGame(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    KickCurrentPlayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    RespondAccusation_NoWitch(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    RespondAccusation_YesWitch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Surrender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hc_verifierAddr(overrides?: CallOverrides): Promise<BigNumber>;

    nw_verifierAddr(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tgs(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vm_verifierAddr(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ActionNoProof(
      actionType: BigNumberish,
      actionTarget: BigNumberish,
      witchType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ActionWithProof(
      actionTarget: BigNumberish,
      witchType: BigNumberish,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    DEBUG_SetGameState(
      inputTgs: ZkWitches.TotalGameStateStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    GetTGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    JoinGame(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    KickCurrentPlayer(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    RespondAccusation_NoWitch(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    RespondAccusation_YesWitch(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Surrender(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hc_verifierAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nw_verifierAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tgs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vm_verifierAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
